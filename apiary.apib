FORMAT: 1A
HOST: https://xena.expan.do:3444

# Xena REST API

Xena REST API enables get and manipulate with all key data used inside Expando Xena system.

**Authentication**

All REST API calls are user authenticated on server side. For authentication is used HTTP basic authentication method. Login and password is issued for each seller company separately by Expando Agency upon request.

Each login and password pair is configured on Expando REST API side with allowed range of resources Typically is configured one or more company id's which given login entity can see/use. If login try to access forbidden resource than Xena API returns ***HTTP 403*** error.  

**Data Result paging**

All `GET` call results are generally limited in size to ensure data will not exceed HTTP message data capacity. Limitation is done by configuring  max. number of biz. entities which one call can return back. System defines max. limit value to 100 items per one result call. This max. value is also default value for every `GET` call.

Return result capacity can be optionally configured on `GET` call via use of ***limit*** parameter value. Parameter allowed value definition is in the range of 1 to 100. Any value above 100 are on server side reduced to 100. Any value lower than 1 are set to 1.

If server collects result data which exceeds in number of items `GET` call's configured max. limit via ***limit*** value than REST API send back result with maximum set limit items and indicate there is next page available. If client wants to get remaining data from server than he has to use `GET` again and specify page number for which data he wants to get.

To support paging on result each result data delivered via HTTP contains among other parameters two parameter names supporting this: ***currentPageNum*** and ***hasNextPage***. The ***currentPageNum*** contains current page number which was returned (it shall match value from GET quest) while ***hasNextPage*** indicate by true/false if there is another waiting data page.

Client must check those values and if indicated next page than call GET with parameter value ***page*** set to ***currentPageNum + 1***.

If ***page*** parameter is not set on `GET` call than REST API will use default value ***page=1*** instead.

**Full Snapshot ver. Updates Only Calls**

Every data entity item (for example Product item, Order item, etc.) returned by REST API has attached **timeStamp** parameter. This parameter is LONG data type value. 

**timeStamp** parameter value is guarantied to be unique for each entity of same data type and particular company combination (e.g. unique for each product entity within company `A`. However uniqueness is not guarantied to be available between products of company `A` and products of company `B`. Uniqueness is not guarantied even between products and orders of same company `A`).

**timeStamp** value is monotonically increased be Xena System every time entity type instance for specific seller is changed. Internally is value based on C# DateTime.Now.Ticks.    

This Xena System behavior can be therefore efficiently use on client side for downloading new/updated items only since last time client called Expando REST API.

Steps to apply on client side:
Client application can use it such way it just need to look-up MAX value of ***timeStamp*** value entity type so far loaded by client. Once found the value the client assigns it to **FromThisStamp** parameter value on `GET` call. REST API server uses such value and selects all entity items with HIGHER value than defined ***timeStamp***.

Default value for **FromThisStamp** is ***FromThisStamp=0***. This value is used when client first time calls REST API and does not received  any value from it.
  
**Date and Time Format**

All date and time data are formatted according this pattern: "YYYY-MM-dd HH:mm:ss".

<!-- Admin Data -->
## Administration [/v1/Admin]

Resource allows to manage Admin related data like Companies and Users. This resource hierarchy is available only for accounts flagged with ***Admin*** role. All others are rejected.

### Get All companies [GET /v1/Admin/Companies{?limit,page,fromTimeStamp}]
Get list of companies. Only admin role is allowed to read this data.

+ Parameters
    + limit: 100 (number, optional) - page size. Min 1 and Max value 100.
    + page: 1 (number, optional) - page number to start from. Value starts from 1.
    + fromTimeStamp: `636516244170000000` (long, optional) - time stamp from which shall be collected data

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + companies (array[CompanyDef], optional)
            

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l
            
+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found`
        + companies: null

### Insert new company item [POST /v1/Admin/Companies]
Insert new company item. If item with given company name already exists than it is returned error.

+ Request (application/json)
    + Attributes
        + companyData (CompanyDef, required)

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + companyData (CompanyDef, required) - company data definition including assigned ID

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiData)
        + result: error
        + errorDetails: `Company not found or product already exists`
        + companyData: null

### Update company details [PUT /v1/Admin/Companies/{CompanyID}]
Update existing company item based on its ID. If company name matches existing for different company ID than it is update rejected.

+ Parameters
    + CompanyID: 123 (number, required) - company ID

+ Request (application/json)
    + Attributes
        + companyData (CompanyDef, required)
            + id (number, required)
            
+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + timeStamp: 636516244170000000 (string, required) - Transaction time stamp of last modification.
        + companyData: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found.`
        + companyData: null

### Get All users [GET /v1/Admin/Users{?limit,page,fromTimeStamp}]
Get list of users. Only admin user role is allowed to read this info.

+ Parameters
    + limit: 100 (number, optional) - page size. Min 1 and Max value 100.
    + page: 1 (number, optional) - page number to start from. Value starts from 1.
    + fromTimeStamp: `636516244170000000` (long, optional) - time stamp from which shall be collected data

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + users (array[UserDef], optional)
            

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l
            
+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found`
        + users: null

### Insert new user item [POST /v1/Admin/Users/{CompanyID}]
Insert new user item. If user with given name already exists than it is returned error.

+ Parameters
    + CompanyID: 123 (number, required) - company ID

+ Request (application/json)
    + Attributes
        + userData (UserDef, required)

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + userData (UserDef, required) - accepted user data with assigned user id

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company does not exists or User name already exists`
        + userData: null

### Update user details [PUT /v1/Admin/Users/{CompanyID}/{UserID}]
Update existing company item based on its ID. If company name matches existing for different company ID than it is update rejected.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + UserID: 51 (number, required) - user ID

+ Request (application/json)
    + Attributes
        + userData (UserDef, required)
            
+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + timeStamp: 636516244170000000 (string, required) - Transaction time stamp of last modification.
        + userData: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or User not found.`
        + userData: null

## Product Management [/v1/Products/{CompanyID}]

Resource allows to manage Product related data. Data provides details like SKU, product title, description etc. which are necessary for product registration on marketplaces. Returned Product data have properties split into common data (aka reusable over marketplaces) and language/marketplace specific sections (e.g. product title, ASIN code, etc.).

Beside product description this API part also provides inventory and price data. This allows external client applications keep marketplace offers up to date.

+ Parameters
    + CompanyID: 123 (number, required) - company ID

### Get All products for company [GET /v1/Products/{CompanyID}{?limit,page,fromTimeStamp}]
Get list of products for specific company.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + limit: 100 (number, optional) - page size. Min 1 and Max value 100.
    + page: 1 (number, optional) - page number to start from. Value starts from 1.
    + fromTimeStamp: `636516244170000000` (long, optional) - time stamp from which shall be collected data

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + products (array[ProductDef], optional)
            

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l
            
+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found`
        + products: null

### Add new product [POST]
Insert new product item. If item with given SKU already exists on server side than it is returned error.

+ Request (application/json)
    + Attributes
        + productData (ProductNoRegistryDataBaseDef, required)

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + productData (ProductBaseDef, required) - returns product data with assigned product ID

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found or product already exists`
        + productData: null

### Get product details for SKU [GET /v1/Products/{CompanyID}/{SKU}]
Gets specific product details based on sku.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + SKU: 2014800111 (string, required) - SKU ID

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + productData (ProductDef, optional)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or product SKU not found.`
        + productData: null

### Update product details [PUT /v1/Products/{CompanyID}/{SKU}]
Update existing product item based on SKU.

+ ParametersF
    + CompanyID: 123 (number, required) - company ID
    + SKU: 2014800111 (string, required) - SKU ID

+ Request (application/json)
    + Attributes
        + productData (ProductNoRegistryDataBaseDef, optional)
            
+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + timeStamp: 636516244170000000 (string, required) - Transaction time stamp of last modification.
        + productData: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or product SKU not found.`
        + productData: null

## Product listing management [/v1/ProductListings/{CompanyID}]
+ Parameters
    + CompanyID: 123 (number, required) - company ID

### Get Product listings [GET /v1/ProductListings/{CompanyID}{?limit,page,fromTimeStamp}]
Get Product for given company

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + limit: 100 (number, optional) - page reference. Min value 1 and Max value 100. Default 100.
    + page: 1 (number, optional) - page number to start from. Default is 1.
    + fromTimeStamp: `636516244170000000` (string, optional) - time stamp from which shall be collected data

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + listings (array[ProductListingsDef], optional)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found.`
        + inventories: null

## Inventory and Price Management [/v1/IPM/{CompanyID}]
Resource enables manage inventory and price for product definitions. Listed prices are have implicit currency assigned to it. Mapping for currency is as follows: US to USD, UK to GBP, DE/FR/IT/ES/SK to EUR, CS to CZK, PL to PLZ, HU to HUF, RO to RON and UE to UAH.

+ Parameters
    + CompanyID: 123 (number, required) - company ID

### Get All inventory and price data [GET /v1/IPM/{CompanyID}{?limit,page,fromTimeStamp}]
Get Quantity and Price list for given company.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + limit: 100 (number, optional) - page reference. Min value 1 and Max value 100. Default 100.
    + page: 1 (number, optional) - page number to start from. Default is 1.
    + fromTimeStamp: `636516244170000000` (string, optional) - time stamp from which shall be collected data

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + inventories (array[InventoryAndPriceDef], optional)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found.`
        + inventories: null

### Get inventory and price for specific SKU [GET /v1/IPM/{CompanyID}/{SKU}]
Get Quantity and Price list for given company.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + SKU: 2014800111 (string, required) - SKU ID

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + inventoryData (InventoryAndPriceDef, required) - returns accepted data

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or SKU not found.`
        + inventories: null


### Insert new product prices [POST]
Insert new Inventory and Price data item. Data in post body must contain fully defined data structure (aka all prices and qty) for marketplace and SKU combination.

+ Request (application/json)
    + Attributes
        + inventoryData (InventoryAndPriceDef, required)

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + inventoryData (InventoryAndPriceDef, required) - returns accepted data

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"
+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found or SKU data already exists.`
        + inventoryData: null

### Update inventory and price details for specific SKU [PUT /v1/IPM/{CompanyID}/{SKU}]
Update existing inventory and price data on SKU.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + SKU: 2014800111 (string, required) - SKU ID

+ Request (application/json)
    + Attributes
        + inventoryData (InventoryAndPriceDef, required) - Expected exactly one member
            
+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + timeStamp: 636516244170000000 (string, required) - Transaction time stamp of last modification.
        + inventoryData: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or product SKU not found.`
        + inventoryData: null

## Data Localization Management [/v1/Localization/{CompanyID}]
Enables define which SKU are localized and to which language.

+ Parameters
    + CompanyID: 123 (number, required) - company ID

### Get All localization definition data [GET /v1/Localization/{CompanyID}{?limit,page,fromTimeStamp}]
Get localization mappings for given company.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + limit: 100 (number, optional) - page reference. Min value 1 and Max value 100. Default 100.
    + page: 1 (number, optional) - page number to start from. Default is 1.
    + fromTimeStamp: `636516244170000000` (string, optional) - time stamp from which shall be collected data

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + localization (array[LocalizationDef], required)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found.`
        + localization: null

### Get localization definition item details [GET /v1/Localization/{CompanyID}/{SKU}]
Get localization mappings for given SKU.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + SKU: `Nike_Air_2018` (string, required) - Product SKU

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + localization (array[LocalizationDef], required)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or SKU not found.`
        + localization: null


### Insert new localization mapping [POST]
Insert new localization data mapping for SKU. Data in post body must contain fully defined mapping.

+ Request (application/json)
    + Attributes
        + localizedData (LocalizationDef, required)

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + localizedData (LocalizationDef, required) - returned localized data stored in system

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"
+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found or SKU localized definition already exists.`
        + localizedData: null

### Update localization mapping details [PUT /v1/Localization/{CompanyID}/{SKU}]
Update existing localization mapping data for specific on SKU reference.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + SKU: `Avx2341` (string, required) - Product SKU ID

+ Request (application/json)
    + Attributes
        + localizedData (LocalizationDef, required) - Expected exactly one member
            
+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + timeStamp: 636516244170000000 (string, required) - Transaction time stamp of last modification.
        + localizedData: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or SKU id reference not found.`
        + localizedData: null

## Order Management [/v1/Orders/{CompanyID}]
Retrieve marketplace related orders data. Order modifications are not supported via this API.

+ Parameters
    + CompanyID: 123 (number, required) - company ID

### Get All order data [GET /v1/Orders/{CompanyID}{?filter,page,fromTimeStamp}]
Get order list based on supplied filter criteria.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + filter: Unshipped (enum[string], optional) - Refers to order types and date range for which is valid result
        - Unshipped - This is default setup. It returns all orders with unshipped status only
        - AllLast5Days - This returns all orders which were purchase within last 5 days and are in final state. On top of it returns all orders which are in "transient" state without date limit (aka Pending and Unshipped). 
        - UpdatedOnly - This returns orders which were changed from the time supplied by ***fromTimeStamp***
    + page: 1 (number, optional) - page number to start from. Default is 1.
    + fromTimeStamp: `636516244170000000` (string, optional) - time stamp from which shall be collected data. If filter defines UpdateOnly type than this parameter must be filled in. In all other filter setup is not used for `GET` command.
    
+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + orders (array[OrderDef], required)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found.`
        + orders: null

### Get order details for specific marketplace order [GET /v1/Orders/{CompanyID}/{MarketplaceOrderID}]
Get marketplace order details for specific marketplace order ID.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + MarketplaceOrderID: `13241-metalshop_de` (string, required) - Marketplace order ID

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + orderData (OrderDef, optional)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or Marketplace order ID not found.`
        + orderData: null

## Seller Order Management [/v1/Sellers/{CompanyID}]
Resource enables manage Seller side order monitoring. Seller order data confirms receiving marketplace order by seller as well as track shipping and tracking number of send package.  

+ Parameters
    + CompanyID: 123 (number, required) - company ID

### Get All seller order data [GET /v1/Sellers/{CompanyID}{?limit,page,fromTimeStamp}]
Get Seller order list for given company.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + limit: 100 (number, optional) - page reference. Min value 1 and Max value 100. Default 100.
    + page: 1 (number, optional) - page number to start from. Default is 1.
    + fromTimeStamp: `636516244170000000` (string, optional) - time stamp from which shall be collected data

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + sellerOrders (array[SellerOrderDef], required)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found.`
        + sellerOrders: null

### Get seller order item details [GET /v1/Sellers/{CompanyID}/{MarketplaceOrderID}]
Get seller order data details for given ID.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + MarketplaceOrderID: `201-4800-99111` (string, required) - Marketplace order ID

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + sellerData (SellerOrderDef, required)

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or seller order based on Marketplace order ID not found.`
        + sellerData: null


### Insert new seller order data [POST]
Insert new Seller Order data item. Data in post body must contain fully defined data structure (aka reference to marketplace order id, status, etc) for marketplace place id.

+ Request (application/json)
    + Attributes
        + sellerData (SellerOrderDef, required)

+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + sellerData (SellerOrderDef, required) - returned seller order data with assigned id

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"
+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company not found or seller order data already exists.`
        + sellerData: null

### Update seller order details [PUT /v1/Sellers/{CompanyID}/{MarketplaceOrderID}]
Update existing seller order data based on Marketplace Order ID.

+ Parameters
    + CompanyID: 123 (number, required) - company ID
    + MarketplaceOrderID: `201-4800-99111` (string, required) - Marketplace order ID

+ Request (application/json)
    + Attributes
        + sellerData (SellerOrderDef, required) - Expected exactly one member
            
+ Response 200 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + timeStamp: 636516244170000000 (string, required) - Transaction time stamp of last modification.
        + sellerData: null

+ Response 401
    + Headers

            WWW-Authenticate: Basic realm="Xena folder"

+ Request
    + Headers

            Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l

+ Response 404 (application/json)
    + Attributes (ReturnedRestApiDataBase)
        + result: error
        + errorDetails: `Company or seller's market order id reference not found.`
        + sellerData: null

# Data Structures

## DataDefBase (object)

- sku: 2014800111 (string, required) - SKU reference

## AmazonCompanyAuthorization (object)
- sellerId (string, required)
- authorizedDeveloperId (string, required)
- mwsAuthToken (string, required)

## ShopifyCompanyAuthorization (object)
- shop (string, required)
- accessToken (string, required)

## CompanyAuthorizations (object)
- amazonEu (AmazonCompanyAuthorization)
- amazonUs (AmazonCompanyAuthorization)
- shopify (ShopifyCompanyAuthorization)

## CompanyDef (object)

- id: 5 (number) - Internal company ID
- name: Alensa (string, required) - Display company name
- longName: Alensa (string, required) - Full company name
- isActive: true (boolean, required) - Indicate `true` is active and `false` is disabled
- language: CS (enum[string], required) - Language to use for business letter communication
    - NA
    - CS
    - EN
    - DE
    - ES
    - FR
    - IT
    - RO
    - BG
    - HU
    - PL
    - UK
- authorizationKeys (CompanyAuthorizations)
- email: `joe.doe@example.com` (string, optional) - Contact person e-mail.
- createdOn: `2018-01-11 05:33:14` (string) - Time stamp when record was created.
- lastChangedOn: `2018-01-15 14:46:57` (string) - Time stamp when record was last time modified/created.
- timeStamp: 636516244170000000 (string) - Transaction time stamp of last modification.

## UserDef (object)

- companyId: 2 (number, required) - Company ID under which user belongs to.
- id: 5 (number, required) - Internal user ID
- name: Joe (string, required) - First user name
- surname: `Doe jr.` (string, required) - Family user name
- isActive: true (boolean, required) - Indicate `true` is active and `false` is disabled
- language: CS (enum[string], required) - Language to use for business letter communication
    - NA
    - CS
    - EN
    - DE
    - ES
    - FR
    - IT
    - RO
    - BG
    - HU
    - PL
    - UK
- email: `joe.doe@example.com` (string, optional) - Contact person e-mail.
- password: `aXrd&6GB78s` (string, required) - User password.
- accessRights (RoleDef, required) - Access rights
- createdOn: `2018-01-11 05:33:14` (string) - Time stamp when record was created.
- lastChangedOn: `2018-01-15 14:46:57` (string) - Time stamp when record was last time modified/created.
- timeStamp: 636516244170000000 (string) - Transaction time stamp of last modification.

## RoleDef (object)

- role: SysAdmin (enum[string], required)
    - Undefined - not able do anything
    - SysAdmin - can do everything (e.g. create companies, users, list/modify biz. data). This user must be from company system which has value 0. Role has access allowed everywhere and to all companies. No access rights defined below limits it.
    - CompanyAdmin - can do company related data management (e.g. create users and list modify data for associated companies) 
    - Client - can do listing and modification biz. data
- productRights (AccessRightsDef, required) - access rights for products
- inventoryRights (AccessRightsDef, required) - access rights for products
- ordersRights (AccessRightsDef, required) - access rights for products
- sellerDataRights (AccessRightsDef, required) - access rights for products
- xenaDashboard (AccessRightsDef, required) - access rights for products

## AccessRightsDef (object)

- accessType: ReadOnly (enum[string], required)
    - NoAccess
    - ReadOnly 
    - ReadWrite

## LocalizationDef (object)

- Include DataDefBase
- sourceLanguage: CS (enum[string], required) - source language
    - NA
    - CS
    - EN
    - DE
    - ES
    - FR
    - IT
    - RO
    - BG
    - HU
    - PL
- destinationLanguage: EN (enum[string], required) - destination language
    - NA
    - CS
    - EN
    - DE
    - ES
    - FR
    - IT
    - RO
    - BG
    - HU
    - PL
- enabled: true (boolean, required) - enabled
- createdOn: `2018-01-11 05:33:14` (string) - Time stamp when record was created.
- lastChangedOn: `2018-01-15 14:46:57` (string) - Time stamp when record was last time modified/created.
- timeStamp: 636516244170000000 (string) - Transaction time stamp of last modification.

## OrderDef (object)

- orderId: `13241-metalshop_de` (string, required) - Marketplace order ID. ID format is specific to marketplace source.
- orderStatus (enum[string], required)
    - Unknown
    - PendingAvailability
    - Pending
    - Unshipped
    - PartiallyShipped
    - Shipped
    - InvoiceUnconfirmed
    - Canceled
    - Unfillable
    - SellerRegistered
    - SellerTNAssigned
    - SellerShipped
    - SellerCanceled
    - Aggregated states
    - NeedShipping
    - NeedShippingAndPending
    - AllAmazon
    - Unfillable
    - AllInternal
    - All
- purchaseDate: `2017-11-01 11:24:03` (string, required) Purchase date. Value in local time of marketplace.
- marketplace: EBAY DE (string, required) - Indicate marketplace and location
- venue: EBAY (enum[string], required) - Selling venue
    - EBAY
    - AMAZON
    - INSPIRUM
    - SPARTOO
- fulfillmentChannel: Seller (enum[string], required) - Parameter Indicates who supply goods to buyer
    - AMZN
    - Seller
    - Undefined
- businessOrder: true (boolean, required) - Indicate if order is placed by company. If end client than set to false. 
- totalPrice: 28.29 (number, required) - Total order price including payment & shipping.
- currencyCode: EUR (enum[string], required) - Parameter indicates currency of ordre price.
    - EUR
    - USD
    - GBP
    - PLZ
    - CZK
    - HUF
    - RON
    - UAH
- language: EN (string, optional) - Indicate language of communication with marketplace. 
- paymentMethod: Other (enum[string], required)
    - Unknown
    - Cash
    - Store
    - Other
    - CCAccepted
    - PayPal
    - WireTransfer
    - CashOnDelivery
    - MoneyXferAcceptedInCheckout
- paymentId: 128 (string, required)
- paymentPrice: 0.0 (number, required) - Price charged for payment.
- shippingMethod: DE_DHLPaket (string, required) - Shipping method indicator
- shippingId: 127 (string, required)
- shippingPrice: 4.90 (number, required) - Shipping price for order
- customer (OrderCustomerDef, required)
- items (array[OrderItemsDef], required)
- timeStamp: 636516244170000000 (string) - Transaction time stamp of last modification.

## OrderCustomerDef (object)
- firstName: Autopflege (string, required)
- surname: `Breiler c/o Conny Förster` (string, required)
- email: `conny.foerster@mail.de` (string, required)
- phone: `+42087654321` (string, required)
- address (object, required)
    - address1: `Alte Str. 42-44` (string, required)
    - address2 (string, required)
    - address3 (string, required)
    - city: `Weil am Rhein` (string, required)
    - zip: `79576` (string, required)
    - stateOrRegion (string, required)
    - country: Germany (string, required)

## OrderItemsDef (object)

- itemId: V251471 (string, required) - SKU of sold item. 
- itemPrice: 23.39 (number, required) - Item price. Currency is same as listed on the order
- itemQuantity: 1 (number, required) - Count of items sold.
- itemName: `Herren T-Shirt Jack Daniels` (string, required) - Product title. Might be empty if not supplied by marketplace. 
- orderItemId: 1894713206017 (string, required) - Marketplace specific item reference. Unique number for each order line. 

## SellerOrderDef (object)

- marketplaceOrderId: `407-5855561-6234719` (string, required)
- sellerInternalOrderId: 9001003875 (string, optional)
- orderStatus: Registered (enum[string], required)De
    - Registered
    - Shipped
    - Canceled
    - TNUpdate
    - ComplaintByCustomer
- registryDatetime: `2018-01-17 06:00:28` (string, required) - Date and time of order registry on seller side. 
- lastUpdateDatetime: `2018-01-22 14:55:00` (string, required) - Date and time of last update on seller side. 
- shipCancelDate: `2018-01-17` (string, required) - Date when package is shipped or order cancel date. Format "yyyy-MM-dd", For registry status is shipCancelData set to `0001-01-01` 
- cancelReason (enum[string], optional) - indicate reason for canceling data. Required only if **orderStatus=Canceled**
    - Undefined
    - NoInventory
    - BuyerCanceled
    - GeneralAdjustment
    - PricingError
    - ShippingAddressUndeliverable
    - CustomerExchange
    - NotPickedUpByCustomer
- carrierCode: DPD (enum[string], required) Indicate shipping carrier. If not specific from list than shall one use Other option and specify **carrierName** field.
    - BluePackage
    - USPS
    - UPS
    - UPSMI
    - FedEx
    - DHL
    - DHLGlobalMail
    - Fastway
    - UPSMailInnovations
    - Lasership
    - RoyalMail
    - FedExSmartPost
    - OSM
    - OnTrac
    - Streamlite
    - Newgistics
    - CanadaPost
    - CityLink
    - GLS
    - GO
    - HermesLogistikGruppe
    - Parcelforce
    - TNT
    - Target
    - SagawaExpress
    - NipponExpress
    - YamatoTransport
    - DPD
    - Other
    - Unknown
- carrierName: DPD_DE (string, required) carried name if indicated Other from **carrierCode**
- trackingNumber: 01925025350108 (string, required) indicate package tracking code which was assigned by carrier company.
- items: 02747069305011 (array[string], required) - list of order items which shall be shipped. They all expect same shipping and tracking number.
- carrierId: 27F0B9FC58B940FE8B469EBE3C76D2D5 (string, optional) Carrier internal package ID if known. Used by JAPO only.
- carrierTrackingStatus: DELIVERED (string, optional) Carrier progress reporting if known. Used by JAPO only.
- timeStamp: 636516244170000000 (string) - Transaction time stamp of last modification.

## CustomDataDef (object) - Dictionary of the parameters and values of the parameters

## CommonDataDef (object)

- parentChild (enum[string], required)
    - Base
    - Parent
    - Variant
- updateBlocked: false (boolean, required) - indicate whether is product modifiable
- productStatus (enum[string], required)
    - Unknown
    - New
    - Active
    - InActive
    - Archived
- ean: 4024144201488 (string, nullable) - EAN number
- parentSKU (string, nullable) - reference to parent SKU. Mandatory for variants otherwise null.
- brand: Cottelli (string, nullable) - Brand like ThinkPad, Xperia, etc.
- manufacturer: Cottelli (string, optional) - Manufacturer like Lenovo, Sony, etc.
- mnp (string, optional) - Manufacturer part number
- productCategory: `Dámské erotické šaty` (string, nullable) - Defines high level category. Might be also list. Depends on destination interpretation.
- productSubCategory (string, optional) - Defines sub-category for product like chef kniwes
- size (string, nullable) - define size like 180, L, 43.5.
- sizeMap (string, nullable) - define standardized size value. Based on entry size
- color (string, nullable) - defines color like "light blue", etc. 
- colorMap (string, nullable) - defines color from range of 16 colors pallete (aka blue)
- variationTheme (string) - indicate variation theme. Currently supported "Size", "Color", "SizeAndColor"
- itemCondition (enum[string], required) 
    - Undefined
    - New
    - Used
- initPrice: 0 (number, default) - product price when product definition imported
- ccy: `CZK` (string, required) - 3 letter currency as defined in the ISO 4217
- initQuantity: 1 (number, default) - indicate stock volume during product definition import/update.
- taxCode (string, optional) - identify tax code like VAT21, etc.
- productUrl: `https://www.sex-shop.cz/access18/cottelli-rybarka-sitovane-saty-s-l-d3073.htm?hrk=QPOCJKFGLDS` (string, nullable) - Reference to seller product page
- imgUrls (array[string])
- customData (CustomDataDef, nullable) - keeps custom data in key/value format. Typically usefull for data which do not have standard field in DB but are important for given product like varies contact lenses sizes, water content, etc.
- origData: `{"CODE":"2014800000","PRICE":"312.4","VAT":"21","DELIVERY_DATE":"0"}` (string, nullable) - keeps custom data in key/value format

## LocalizedDataDef (object)

- language(enum[string], required) - indicate language which is used for localized data
    - NA
    - CS
    - EN
    - DE
    - ES
    - FR
    - IT
    - PL
    - RO
    - UK
    - HU
- suppliedBySeller: true (boolean, required) - inidicate if seller was supplier this localized data
- translated: false (boolean) - indicate if data was translated on Xena side
- approved: true (boolean) - indicate if language wersion is fully approved to be used on marketplace side
- name: `Cottelli Rybárka Sítované šaty S-L` (string, required) - product title
- description: `Skvele elastické šaty s velkými oky. Materiál: 85% Polyamid, 15% Elasthan.` (string, required) - product description
- keywords (array[string], required) - list of keyword definitions to be registered with search engine. Up to 5 items in array. Each item can contain multiple keywords separated by comma.
- bulletPoints (array[string], required) - list of bullet points to be shown as short description on product page. Up to 5 items in array.

## MarketplaceSetupDef (object)

- Amazon (CountriesSetupDef, optional) 
- Ebay (CountriesSetupDef, optional) 
- Spartoo (CountriesSetupDef, optional) 
- Inspirum (CountriesSetupDef, optional) 
- Magento (CountriesSetupDef, optional) 

## CountriesSetupDef (object)

- US: false (boolean,optional)
- UK: false (boolean,optional)
- DE: false (boolean,optional)
- FR: false (boolean,optional)
- ES: false (boolean,optional)
- IT: false (boolean,optional)
- HU: false (boolean,optional)
- RO: false (boolean,optional)
- PL: false (boolean,optional)
- UE: false (boolean,optional)

## MarketRegistryDataDef (object)

- marketplaceSetup (MarketplaceSetupDef, optional) - list of marketplaces with values indicating if marketplace used for trading or not.

## ProductNoRegistryDataBaseDef (object)

- Include DataDefBase
- commonData (CommonDataDef, required) - common product data section
- localizedData (array[LocalizedDataDef], optional) - product language specific fields. For each language translation one record.
- timeStamp: 636516244170000000 (string) - Transaction time stamp of last modification.

## ProductBaseDef (object)

- Include ProductNoRegistryDataBaseDef
- marketRegistryData (MarketRegistryDataDef, optional) - holds info about product presented on marketplace

## ProductDef (object)

- Include ProductBaseDef
- lastChanged: `2018-01-15 14:46:57` (string) - Time stamp when record was last time modified/created.
- key: 2014800000 (string, required) - unified key under which product def is uniquely sorted.
- timeStamp: 636516244170000000 (string) - Time stamp translated into DateTime.Ticks as defined in C#.

## InventoryAndPriceDef (object)

- Include DataDefBase
- marketplace (enum[string], required) - marketplace reference. 
  - NA - Not available
  - Amazon
  - Spartoo
  - Ebay
  - Inspirum
  - Magento
- quantity: 0 (number, default) - product QTY
- priceUS (number, optional) - price for US country. Implied currency USD. 
- priceUK (number, optional) - price for UK country. Implied currency GBP.
- priceDE: 0.01 (number) - price for DE country. Implied currency EUR.
- priceFR (number, optional) - price for FR country. Implied currency EUR.
- priceES (number, optional) - price for ES country. Implied currency EUR.
- priceIT (number, optional) - price for IT country. Implied currency EUR.
- priceHU (number, optional) - price for HU country. Implied currency HUF.
- priceRO (number, optional) - price for RO country. Implied currency RON.
- pricePL (number, optional) - price for PL country. Implied currency PLZ.
- priceUE (number, optional) - price for Ukraine country. Implied currency UAH.
- lastChanged: `2018-01-15 14:46:57` (string) - Time stamp when record was last time modified/created.
- key: 2014800000 (string, required) - unified key under which product def is uniquely sorted.
- timeStamp: 636516244170000000 (string) - Transaction time stamp of last modification.

## DataDef (object)

- companies (array[CompanyDef], optional) - list of companies
- users (array[UserDef], optional) - list of users
- orders (array[OrderDef], optional) - list of orders for given filter and company ID
- sellerOrders (array[SellerOrderDef], optional) - list of seller orders for given filter and company ID
- products (array[ProductDef], optional) - list of products for given filter and companyID
- inventories (array[InventoryAndPriceDef], optional) - list of SKU with current inventory and prices values.


## ReturnedRestApiDataBase (object)

- result (enum[string], required) - indicate success or failuers of data collection on server side
    - ok
    - error
- currentPageNum: 1 (number, default) - returns current page number
- hasNextPage: false (boolean, default) - indicate if next page is available
- errorDetails (string, nullable) - Holds error if result type is error


## ReturnedRestApiData (object)

- Include ReturnedRestApiDataBase
- companyID: 16 (number, required) - Company ID


## ModificationRequestDef (object)
- companyID: 16 (number, required) - Company ID

## MarketplaceCode (enum[string])
- Unknown
- Amazon_uk
- Amazon_de
- Amazon_fr
- Amazon_it
- Amazon_es
- AmazonEuropeRegion
- Amazon_ca
- Amazon_mx
- Amazon_us
- AmazonNorthAmericaRegion
- Amazon_in
- AmazonIndiaRegion
- Amazon_cn
- AmazonChinaRegion
- Amazon_jp
- AmazonJapanRegion
- Ebay_uk
- Ebay_de
- Ebay_fr
- Ebay_it
- Ebay_es
- EbayEuropeRegion
- Ebay_ca
- Ebay_mx
- Ebay_us
- EbayNorthAmericaRegion
- Ebay_in
- EbayIndiaRegion
- Ebay_cn
- EbayChinaRegion
- Ebay_jp
- EbayJapanRegion
- Spartoo_uk
- Spartoo_de
- Spartoo_fr
- Spartoo_it
- Spartoo_es
- SpartooEuropeRegion
- Spartoo_ca
- Spartoo_mx
- Spartoo_us
- SpartooNorthAmericaRegion
- Spartoo_in
- SpartooIndiaRegion
- Spartoo_cn
- SpartooChinaRegion
- Spartoo_jp
- SpartooJapanRegion
- CDiscount_fr
- CDiscount_be
- CDiscountEuropeRegion
- Shop_de

## ProductListingsDef (object)
- Include DataDefBase
- isListed: true (boolean)
- errorCode: '' (string)
- errorText: '' (string)
- errorLink: '' (string)
- marketplaceId: amazon_de (MarketplaceCode)
- createdOn: `2018-01-11 05:33:14` (string) - Time stamp when record was created.
- lastChangedOn: `2018-01-15 14:46:57` (string) - Time stamp when record was last time modified/created.
- timeStamp: 636516244170000000 (string) - Transaction time stamp of last modification.